name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: inventory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server kafka:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9092:9092
        depends-on:
          zookeeper:
            condition: service_healthy
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        options: >-
          --health-cmd "echo srvr | nc zookeeper 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 2181:2181

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip
    
    - name: Run Java tests
      run: |
        cd inventory-service
        mvn clean test
        cd ../supplier-service
        mvn clean test
    
    - name: Run Python tests
      run: |
        cd ml-service
        pip install -r requirements.txt
        python -m pytest tests/ -v
    
    - name: Run .NET tests
      run: |
        cd blazor-ui
        dotnet test
    
    - name: Run integration tests
      run: |
        cd infrastructure
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        ./run-integration-tests.sh
        docker-compose -f docker-compose.test.yml down

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push inventory-service
      uses: docker/build-push-action@v5
      with:
        context: ./inventory-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push ml-service
      uses: docker/build-push-action@v5
      with:
        context: ./ml-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push supplier-service
      uses: docker/build-push-action@v5
      with:
        context: ./supplier-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/supplier-service:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push blazor-ui
      uses: docker/build-push-action@v5
      with:
        context: ./blazor-ui
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/blazor-ui:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Здесь будет логика деплоя в staging
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Здесь будут smoke тесты

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Здесь будет логика деплоя в production
    
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Здесь будут health checks
    
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Здесь будет уведомление о деплое



